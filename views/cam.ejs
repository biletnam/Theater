<html>
<script src="/javascripts/reconnectingwebsocket.js"> </script>
<head>


</head>
<body onload="load()">
CAM<br>
<canvas id="facedraw" width="1280" height="1024%"></canvas>


<br>
<%var value = 0%>
<select onChange="eventselected(this)">

<%events.forEach(function(v){%>
<option value="<%=value%>">
<%= webserver.formatDate(v.ontime)%>
<%=((v.facefound)?" !Face Detected!":"")%>
<%v.keywords.forEach(function(word){%>
<%=axis.keywordfilter(word)%>
<%});%>
</option>
    <%++value%>
    <%});%>
</select>
</body>
<script>
    var timerid = 0;
    var img = []
    function eventselected(e){
        console.log('img selecteedd');
        var imageloop = 0;
        img=[];
        console.log("*"+events[e.value].events[0].imagepath)
        console.log('img selecteedd');

        events[e.value].events.sort(function(a,b) {return (a.imagepath > b.imagepath) ? 1 : ((b.imagepath > a.imagepath) ? -1 : 0);} );
     //   document.getElementById("camimage").src = events[e.value].events[0].imagepath.replace("c:/level451/qlink/public","http://level451.com:3000")
        clearInterval(timerid);
        console.log("*"+events[e.value].events[0].imagepath)
        for (var i = 0; i < events[e.value].events.length; i++) {

            img[i] = new Image()
            img[i].src = events[e.value].events[i].imagepath.replace("c:/level451/qlink/public", "http://level451.com:3000")
            console.log("img.src"+img[i].src);
            img[i].onload = function(){

            }
        }



        timerid = setInterval(function(){
            ++imageloop;
            if (imageloop >= events[e.value].events.length ){
                imageloop = 0
            }
            //document.getElementById("camimage").src = img[imageloop].src
         //   console.log(img[imageloop].src);
            var canvas = document.getElementById("facedraw");
            context = canvas.getContext('2d');
            context.drawImage(img[imageloop], 0, 0, img[imageloop].width, img[imageloop].height);
            if (events[e.value].events[imageloop].Faces){
                var faces = events[e.value].events[imageloop].Faces
                context.strokeStyle = 'rgba(0,255,0,0.8)';
                context.lineWidth = '5';
                //console.log(faces.boundingPoly.vertices)
                context.beginPath();
                faces[0].fdBoundingPoly.vertices.forEach(function(bounds) {
                //faces[0].boundingPoly.vertices.forEach(function(bounds) {
                     context.lineTo(bounds.x, bounds.y);
                });

              //  context.lineTo(faces[0].boundingPoly.vertices[0].x, faces[0].boundingPoly.vertices[0].y);
                 context.lineTo(faces[0].fdBoundingPoly.vertices[0].x, faces[0].fdBoundingPoly.vertices[0].y);


                context.stroke();

                context.beginPath();

                faces[0].boundingPoly.vertices.forEach(function(bounds) {
                    context.lineTo(bounds.x, bounds.y);
                });

                  context.lineTo(faces[0].boundingPoly.vertices[0].x, faces[0].boundingPoly.vertices[0].y);
// try drawing eyes
                context.stroke();
                //context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);
                var so =''
                context.lineWidth = '1';

                for (var i=0; i < faces[0].landmarks.length; i++) {

                    so = faces[0].landmarks[i]
                    if (so.type == "RIGHT_EYE") {
                        context.beginPath();
                        context.arc(so.position.x, so.position.y, 7, 0, 2 * Math.PI, false);
                        context.stroke();

                    }
                    if (so.type == "LEFT_EYE") {
                        context.beginPath();
                        context.arc(so.position.x, so.position.y, 7, 0, 2 * Math.PI, false);
                        context.stroke();
                    }
                    if (so.type == "MIDPOINT_BETWEEN_EYES") {
                        context.beginPath();
                        context.arc(so.position.x, so.position.y, 7, 0, 2 * Math.PI, false);
                        context.stroke();
                    }
                    if (so.type == "NOSE_TIP") {
                        context.beginPath();
                        context.arc(so.position.x, so.position.y, 7, 0, 2 * Math.PI, false);
                        context.stroke();
                    }
                    if (so.type == "MOUTH_CENTER") {
                        context.beginPath();
                        context.arc(so.position.x, so.position.y, 3, 0, 2 * Math.PI, false);
                        context.stroke();
                    }
                    if (so.type == "MOUTH_LEFT") {
                        context.beginPath();
                        context.arc(so.position.x, so.position.y, 3, 0, 2 * Math.PI, false);
                        context.stroke();
                    }
                    if (so.type == "MOUTH_RIGHT") {
                        context.beginPath();
                        context.arc(so.position.x, so.position.y, 3, 0, 2 * Math.PI, false);
                        context.stroke();
                    }
                    if (so.type == "LEFT_EAR_TRAGION") {
                        context.beginPath();
                        context.arc(so.position.x, so.position.y, 3, 0, 2 * Math.PI, false);
                        context.stroke();
                    }
                    if (so.type == "RIGHT_EAR_TRAGION") {
                        context.beginPath();
                        context.arc(so.position.x, so.position.y, 3, 0, 2 * Math.PI, false);
                        context.stroke();
                    }




                }





            }

        },500)



    }


    function load() {

        events =  <%-JSON.stringify(events)%>
        console.log('onload');
        wsUri = "ws://" + window.location.hostname + ":8080";
        ws = new ReconnectingWebSocket(wsUri);
        //ws = new WebSocket(wsUri);
        ws.onopen = function(evt){
            console.log("websocket connected");
           // ws.send("test message");

        };
        ws.onmessage = function(evt) {

         //   lightlevel = JSON.parse(evt.data);
           // draw(floor);

        };

    }
function namechange(id,value){
        var sendobj ={};
        sendobj.type ="shower";
        sendobj.instruction = 'updateuser';
        sendobj.id = id;
        sendobj.user = value;
        ws.send(JSON.stringify(sendobj));
        console.log(id,value);
    };
function onminuteschange(id,value){
    var sendobj ={};
    sendobj.type ="shower";
    sendobj.instruction = 'updateonminutes';
    sendobj.id = id;
    sendobj.onminutes = value;
    ws.send(JSON.stringify(sendobj));
        console.log(id,value);
        location.reload();
    };
function ctmenu(id){
    console.log('context menu'+id);
    var sendobj ={};
    sendobj.type ="shower";
    sendobj.instruction = 'duplicate';
    sendobj.id = id;
    ws.send(JSON.stringify(sendobj));
    location.reload();}


</script>
